// Code generated by go-bindata.
// sources:
// config.json
// db/migrations/v0.0.0.sql
// db/migrations/v0.1.0.sql
// db/migrations/v1.0.0.sql
// db/migrations/v1.1.0.sql
// db/migrations/v1.2.0.sql
// db/migrations/v1.3.0.sql
// db/migrations/v1.4.0.sql
// db/migrations/v1.5.0.sql
// db/migrations/v1.6.0.sql
// db/migrations/v1.7.0.sql
// db/migrations/v1.8.0.sql
// db/migrations/v1.9.0.sql
// db/migrations/v2.2.1.sql
// db/migrations/v2.3.0.sql
// public/css/.gitignore
// public/css/login.less
// public/css/octocat.less
// public/css/semaphore.css
// public/css/semaphore.less
// public/html/.gitignore
// public/html/abstract.html
// public/html/abstract.pug
// public/html/admin.html
// public/html/admin.pug
// public/html/dashboard.html
// public/html/dashboard.pug
// public/html/index.html
// public/html/index.pug
// public/html/tasks.html
// public/html/tasks.pug
// public/html/auth/login.html
// public/html/auth/login.pug
// public/html/auth/logout.html
// public/html/auth/logout.pug
// public/html/projects/add.html
// public/html/projects/add.pug
// public/html/projects/container.html
// public/html/projects/container.pug
// public/html/projects/createTaskModal.html
// public/html/projects/createTaskModal.pug
// public/html/projects/dashboard.html
// public/html/projects/dashboard.pug
// public/html/projects/edit.html
// public/html/projects/edit.pug
// public/html/projects/schedule.html
// public/html/projects/schedule.pug
// public/html/projects/taskModal.html
// public/html/projects/taskModal.pug
// public/html/projects/environment/add.html
// public/html/projects/environment/add.pug
// public/html/projects/environment/list.html
// public/html/projects/environment/list.pug
// public/html/projects/inventory/add.html
// public/html/projects/inventory/add.pug
// public/html/projects/inventory/edit.html
// public/html/projects/inventory/edit.pug
// public/html/projects/inventory/list.html
// public/html/projects/inventory/list.pug
// public/html/projects/keys/add.html
// public/html/projects/keys/add.pug
// public/html/projects/keys/list.html
// public/html/projects/keys/list.pug
// public/html/projects/repositories/add.html
// public/html/projects/repositories/add.pug
// public/html/projects/repositories/list.html
// public/html/projects/repositories/list.pug
// public/html/projects/templates/add.html
// public/html/projects/templates/add.pug
// public/html/projects/templates/list.html
// public/html/projects/templates/list.pug
// public/html/projects/users/add.html
// public/html/projects/users/add.pug
// public/html/projects/users/list.html
// public/html/projects/users/list.pug
// public/html/users/add.html
// public/html/users/add.pug
// public/html/users/list.html
// public/html/users/list.pug
// public/html/users/user.html
// public/html/users/user.pug
// public/img/icon.png
// public/img/logo.png
// public/img/screenshot.png
// public/js/app.js
// public/js/bundle.js
// public/js/controllers/admin.js
// public/js/controllers/dashboard.js
// public/js/controllers/login.js
// public/js/controllers/tasks.js
// public/js/controllers/user.js
// public/js/controllers/users.js
// public/js/controllers/projects/dashboard.js
// public/js/controllers/projects/edit.js
// public/js/controllers/projects/environment.js
// public/js/controllers/projects/inventory.js
// public/js/controllers/projects/keys.js
// public/js/controllers/projects/repositories.js
// public/js/controllers/projects/schedule.js
// public/js/controllers/projects/taskRunner.js
// public/js/controllers/projects/templates.js
// public/js/controllers/projects/users.js
// public/js/factories/host.js
// public/js/factories/hostgroup.js
// public/js/factories/identity.js
// public/js/factories/job.js
// public/js/factories/playbook.js
// public/js/factories/project.js
// public/js/factories/task.js
// public/js/factories/user.js
// public/js/routes/auth.js
// public/js/routes/project.js
// public/js/routes/router.js
// public/js/services/hostgroups.js
// public/js/services/identities.js
// public/js/services/jobs.js
// public/js/services/playbooks.js
// public/js/services/tasks.js
// public/js/services/user.js
// public/js/services/users.js
// public/vendor/.git
// public/vendor/angular-couch-potato.js
// public/vendor/angular-ui-router.min.js
// public/vendor/angular-ui.min.js
// public/vendor/angular.min.js
// public/vendor/async.js
// public/vendor/require.min.js
// public/vendor/angular-loading-bar/loading-bar.css
// public/vendor/angular-loading-bar/loading-bar.js
// public/vendor/angular-loading-bar/loading-bar.min.js
// public/vendor/bootstrap/.editorconfig
// public/vendor/bootstrap/.gitattributes
// public/vendor/bootstrap/.gitignore
// public/vendor/bootstrap/README.md
// public/vendor/bootstrap/bower.json
// public/vendor/bootstrap/package.json
// public/vendor/bootstrap/dist/css/bootstrap-theme.css
// public/vendor/bootstrap/dist/css/bootstrap-theme.css.map
// public/vendor/bootstrap/dist/css/bootstrap-theme.min.css
// public/vendor/bootstrap/dist/css/bootstrap.css
// public/vendor/bootstrap/dist/css/bootstrap.css.map
// public/vendor/bootstrap/dist/css/bootstrap.min.css
// public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.eot
// public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.svg
// public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.ttf
// public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff
// public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2
// public/vendor/bootstrap/dist/js/bootstrap.js
// public/vendor/bootstrap/dist/js/bootstrap.min.js
// public/vendor/bootstrap/dist/js/npm.js
// public/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot
// public/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg
// public/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf
// public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff
// public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2
// public/vendor/bootstrap/less/.csscomb.json
// public/vendor/bootstrap/less/.csslintrc
// public/vendor/bootstrap/less/alerts.less
// public/vendor/bootstrap/less/badges.less
// public/vendor/bootstrap/less/bootstrap.less
// public/vendor/bootstrap/less/breadcrumbs.less
// public/vendor/bootstrap/less/button-groups.less
// public/vendor/bootstrap/less/buttons.less
// public/vendor/bootstrap/less/carousel.less
// public/vendor/bootstrap/less/close.less
// public/vendor/bootstrap/less/code.less
// public/vendor/bootstrap/less/component-animations.less
// public/vendor/bootstrap/less/dropdowns.less
// public/vendor/bootstrap/less/forms.less
// public/vendor/bootstrap/less/glyphicons.less
// public/vendor/bootstrap/less/grid.less
// public/vendor/bootstrap/less/input-groups.less
// public/vendor/bootstrap/less/jumbotron.less
// public/vendor/bootstrap/less/labels.less
// public/vendor/bootstrap/less/list-group.less
// public/vendor/bootstrap/less/media.less
// public/vendor/bootstrap/less/mixins.less
// public/vendor/bootstrap/less/modals.less
// public/vendor/bootstrap/less/navbar.less
// public/vendor/bootstrap/less/navs.less
// public/vendor/bootstrap/less/normalize.less
// public/vendor/bootstrap/less/pager.less
// public/vendor/bootstrap/less/pagination.less
// public/vendor/bootstrap/less/panels.less
// public/vendor/bootstrap/less/popovers.less
// public/vendor/bootstrap/less/print.less
// public/vendor/bootstrap/less/progress-bars.less
// public/vendor/bootstrap/less/responsive-embed.less
// public/vendor/bootstrap/less/responsive-utilities.less
// public/vendor/bootstrap/less/scaffolding.less
// public/vendor/bootstrap/less/tables.less
// public/vendor/bootstrap/less/theme.less
// public/vendor/bootstrap/less/thumbnails.less
// public/vendor/bootstrap/less/tooltip.less
// public/vendor/bootstrap/less/type.less
// public/vendor/bootstrap/less/utilities.less
// public/vendor/bootstrap/less/variables.less
// public/vendor/bootstrap/less/wells.less
// public/vendor/bootstrap/less/mixins/alerts.less
// public/vendor/bootstrap/less/mixins/background-variant.less
// public/vendor/bootstrap/less/mixins/border-radius.less
// public/vendor/bootstrap/less/mixins/buttons.less
// public/vendor/bootstrap/less/mixins/center-block.less
// public/vendor/bootstrap/less/mixins/clearfix.less
// public/vendor/bootstrap/less/mixins/forms.less
// public/vendor/bootstrap/less/mixins/gradients.less
// public/vendor/bootstrap/less/mixins/grid-framework.less
// public/vendor/bootstrap/less/mixins/grid.less
// public/vendor/bootstrap/less/mixins/hide-text.less
// public/vendor/bootstrap/less/mixins/image.less
// public/vendor/bootstrap/less/mixins/labels.less
// public/vendor/bootstrap/less/mixins/list-group.less
// public/vendor/bootstrap/less/mixins/nav-divider.less
// public/vendor/bootstrap/less/mixins/nav-vertical-align.less
// public/vendor/bootstrap/less/mixins/opacity.less
// public/vendor/bootstrap/less/mixins/pagination.less
// public/vendor/bootstrap/less/mixins/panels.less
// public/vendor/bootstrap/less/mixins/progress-bar.less
// public/vendor/bootstrap/less/mixins/reset-filter.less
// public/vendor/bootstrap/less/mixins/reset-text.less
// public/vendor/bootstrap/less/mixins/resize.less
// public/vendor/bootstrap/less/mixins/responsive-visibility.less
// public/vendor/bootstrap/less/mixins/size.less
// public/vendor/bootstrap/less/mixins/tab-focus.less
// public/vendor/bootstrap/less/mixins/table-row.less
// public/vendor/bootstrap/less/mixins/text-emphasis.less
// public/vendor/bootstrap/less/mixins/text-overflow.less
// public/vendor/bootstrap/less/mixins/vendor-prefixes.less
// public/vendor/fontawesome/fonts/FontAwesome.otf
// public/vendor/fontawesome/fonts/fontawesome-webfont.eot
// public/vendor/fontawesome/fonts/fontawesome-webfont.svg
// public/vendor/fontawesome/fonts/fontawesome-webfont.ttf
// public/vendor/fontawesome/fonts/fontawesome-webfont.woff
// public/vendor/fontawesome/fonts/fontawesome-webfont.woff2
// public/vendor/fontawesome/less/animated.less
// public/vendor/fontawesome/less/bordered-pulled.less
// public/vendor/fontawesome/less/core.less
// public/vendor/fontawesome/less/fixed-width.less
// public/vendor/fontawesome/less/font-awesome.less
// public/vendor/fontawesome/less/icons.less
// public/vendor/fontawesome/less/larger.less
// public/vendor/fontawesome/less/list.less
// public/vendor/fontawesome/less/mixins.less
// public/vendor/fontawesome/less/path.less
// public/vendor/fontawesome/less/rotated-flipped.less
// public/vendor/fontawesome/less/stacked.less
// public/vendor/fontawesome/less/variables.less
// public/vendor/moment/moment-tz.js
// public/vendor/moment/moment-tz.min.js
// public/vendor/moment/moment.js
// public/vendor/moment/moment.min.js
// public/vendor/sweetalert/sweetalert.css
// public/vendor/sweetalert/sweetalert.min.js
// DO NOT EDIT!

package util

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// configJson reads file data from disk. It returns an error on failure.
func configJson() (*asset, error) {
	path := "/Users/m/p/semaphore/config.json"
	name := "config.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV000Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV000Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v0.0.0.sql"
	name := "db/migrations/v0.0.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV010Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV010Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v0.1.0.sql"
	name := "db/migrations/v0.1.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV100Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV100Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.0.0.sql"
	name := "db/migrations/v1.0.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV110Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV110Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.1.0.sql"
	name := "db/migrations/v1.1.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV120Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV120Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.2.0.sql"
	name := "db/migrations/v1.2.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV130Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV130Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.3.0.sql"
	name := "db/migrations/v1.3.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV140Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV140Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.4.0.sql"
	name := "db/migrations/v1.4.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV150Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV150Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.5.0.sql"
	name := "db/migrations/v1.5.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV160Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV160Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.6.0.sql"
	name := "db/migrations/v1.6.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV170Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV170Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.7.0.sql"
	name := "db/migrations/v1.7.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV180Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV180Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.8.0.sql"
	name := "db/migrations/v1.8.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV190Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV190Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v1.9.0.sql"
	name := "db/migrations/v1.9.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV221Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV221Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v2.2.1.sql"
	name := "db/migrations/v2.2.1.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV230Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV230Sql() (*asset, error) {
	path := "/Users/m/p/semaphore/db/migrations/v2.3.0.sql"
	name := "db/migrations/v2.3.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssGitignore reads file data from disk. It returns an error on failure.
func publicCssGitignore() (*asset, error) {
	path := "/Users/m/p/semaphore/public/css/.gitignore"
	name := "public/css/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssLoginLess reads file data from disk. It returns an error on failure.
func publicCssLoginLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/css/login.less"
	name := "public/css/login.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssOctocatLess reads file data from disk. It returns an error on failure.
func publicCssOctocatLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/css/octocat.less"
	name := "public/css/octocat.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssSemaphoreCss reads file data from disk. It returns an error on failure.
func publicCssSemaphoreCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/css/semaphore.css"
	name := "public/css/semaphore.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssSemaphoreLess reads file data from disk. It returns an error on failure.
func publicCssSemaphoreLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/css/semaphore.less"
	name := "public/css/semaphore.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlGitignore reads file data from disk. It returns an error on failure.
func publicHtmlGitignore() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/.gitignore"
	name := "public/html/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAbstractHtml reads file data from disk. It returns an error on failure.
func publicHtmlAbstractHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/abstract.html"
	name := "public/html/abstract.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAbstractPug reads file data from disk. It returns an error on failure.
func publicHtmlAbstractPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/abstract.pug"
	name := "public/html/abstract.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAdminHtml reads file data from disk. It returns an error on failure.
func publicHtmlAdminHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/admin.html"
	name := "public/html/admin.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAdminPug reads file data from disk. It returns an error on failure.
func publicHtmlAdminPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/admin.pug"
	name := "public/html/admin.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlDashboardHtml reads file data from disk. It returns an error on failure.
func publicHtmlDashboardHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/dashboard.html"
	name := "public/html/dashboard.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlDashboardPug reads file data from disk. It returns an error on failure.
func publicHtmlDashboardPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/dashboard.pug"
	name := "public/html/dashboard.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlIndexHtml reads file data from disk. It returns an error on failure.
func publicHtmlIndexHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/index.html"
	name := "public/html/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlIndexPug reads file data from disk. It returns an error on failure.
func publicHtmlIndexPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/index.pug"
	name := "public/html/index.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlTasksHtml reads file data from disk. It returns an error on failure.
func publicHtmlTasksHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/tasks.html"
	name := "public/html/tasks.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlTasksPug reads file data from disk. It returns an error on failure.
func publicHtmlTasksPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/tasks.pug"
	name := "public/html/tasks.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLoginHtml reads file data from disk. It returns an error on failure.
func publicHtmlAuthLoginHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/auth/login.html"
	name := "public/html/auth/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLoginPug reads file data from disk. It returns an error on failure.
func publicHtmlAuthLoginPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/auth/login.pug"
	name := "public/html/auth/login.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLogoutHtml reads file data from disk. It returns an error on failure.
func publicHtmlAuthLogoutHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/auth/logout.html"
	name := "public/html/auth/logout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLogoutPug reads file data from disk. It returns an error on failure.
func publicHtmlAuthLogoutPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/auth/logout.pug"
	name := "public/html/auth/logout.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/add.html"
	name := "public/html/projects/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/add.pug"
	name := "public/html/projects/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsContainerHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsContainerHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/container.html"
	name := "public/html/projects/container.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsContainerPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsContainerPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/container.pug"
	name := "public/html/projects/container.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsCreatetaskmodalHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsCreatetaskmodalHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/createTaskModal.html"
	name := "public/html/projects/createTaskModal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsCreatetaskmodalPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsCreatetaskmodalPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/createTaskModal.pug"
	name := "public/html/projects/createTaskModal.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsDashboardHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsDashboardHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/dashboard.html"
	name := "public/html/projects/dashboard.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsDashboardPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsDashboardPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/dashboard.pug"
	name := "public/html/projects/dashboard.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEditHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEditHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/edit.html"
	name := "public/html/projects/edit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEditPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEditPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/edit.pug"
	name := "public/html/projects/edit.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsScheduleHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsScheduleHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/schedule.html"
	name := "public/html/projects/schedule.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsSchedulePug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsSchedulePug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/schedule.pug"
	name := "public/html/projects/schedule.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTaskmodalHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTaskmodalHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/taskModal.html"
	name := "public/html/projects/taskModal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTaskmodalPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTaskmodalPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/taskModal.pug"
	name := "public/html/projects/taskModal.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/environment/add.html"
	name := "public/html/projects/environment/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/environment/add.pug"
	name := "public/html/projects/environment/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/environment/list.html"
	name := "public/html/projects/environment/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/environment/list.pug"
	name := "public/html/projects/environment/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/add.html"
	name := "public/html/projects/inventory/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/add.pug"
	name := "public/html/projects/inventory/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryEditHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryEditHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/edit.html"
	name := "public/html/projects/inventory/edit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryEditPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryEditPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/edit.pug"
	name := "public/html/projects/inventory/edit.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/list.html"
	name := "public/html/projects/inventory/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/inventory/list.pug"
	name := "public/html/projects/inventory/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/keys/add.html"
	name := "public/html/projects/keys/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/keys/add.pug"
	name := "public/html/projects/keys/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/keys/list.html"
	name := "public/html/projects/keys/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/keys/list.pug"
	name := "public/html/projects/keys/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/repositories/add.html"
	name := "public/html/projects/repositories/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/repositories/add.pug"
	name := "public/html/projects/repositories/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/repositories/list.html"
	name := "public/html/projects/repositories/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/repositories/list.pug"
	name := "public/html/projects/repositories/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/templates/add.html"
	name := "public/html/projects/templates/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/templates/add.pug"
	name := "public/html/projects/templates/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/templates/list.html"
	name := "public/html/projects/templates/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/templates/list.pug"
	name := "public/html/projects/templates/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/users/add.html"
	name := "public/html/projects/users/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/users/add.pug"
	name := "public/html/projects/users/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersListHtml reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/users/list.html"
	name := "public/html/projects/users/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/projects/users/list.pug"
	name := "public/html/projects/users/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersAddHtml reads file data from disk. It returns an error on failure.
func publicHtmlUsersAddHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/add.html"
	name := "public/html/users/add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersAddPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersAddPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/add.pug"
	name := "public/html/users/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersListHtml reads file data from disk. It returns an error on failure.
func publicHtmlUsersListHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/list.html"
	name := "public/html/users/list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersListPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersListPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/list.pug"
	name := "public/html/users/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersUserHtml reads file data from disk. It returns an error on failure.
func publicHtmlUsersUserHtml() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/user.html"
	name := "public/html/users/user.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersUserPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersUserPug() (*asset, error) {
	path := "/Users/m/p/semaphore/public/html/users/user.pug"
	name := "public/html/users/user.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgIconPng reads file data from disk. It returns an error on failure.
func publicImgIconPng() (*asset, error) {
	path := "/Users/m/p/semaphore/public/img/icon.png"
	name := "public/img/icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgLogoPng reads file data from disk. It returns an error on failure.
func publicImgLogoPng() (*asset, error) {
	path := "/Users/m/p/semaphore/public/img/logo.png"
	name := "public/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgScreenshotPng reads file data from disk. It returns an error on failure.
func publicImgScreenshotPng() (*asset, error) {
	path := "/Users/m/p/semaphore/public/img/screenshot.png"
	name := "public/img/screenshot.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsAppJs reads file data from disk. It returns an error on failure.
func publicJsAppJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/app.js"
	name := "public/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsBundleJs reads file data from disk. It returns an error on failure.
func publicJsBundleJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/bundle.js"
	name := "public/js/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersAdminJs reads file data from disk. It returns an error on failure.
func publicJsControllersAdminJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/admin.js"
	name := "public/js/controllers/admin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersDashboardJs reads file data from disk. It returns an error on failure.
func publicJsControllersDashboardJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/dashboard.js"
	name := "public/js/controllers/dashboard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersLoginJs reads file data from disk. It returns an error on failure.
func publicJsControllersLoginJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/login.js"
	name := "public/js/controllers/login.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersTasksJs reads file data from disk. It returns an error on failure.
func publicJsControllersTasksJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/tasks.js"
	name := "public/js/controllers/tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersUserJs reads file data from disk. It returns an error on failure.
func publicJsControllersUserJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/user.js"
	name := "public/js/controllers/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersUsersJs reads file data from disk. It returns an error on failure.
func publicJsControllersUsersJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/users.js"
	name := "public/js/controllers/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsDashboardJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsDashboardJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/dashboard.js"
	name := "public/js/controllers/projects/dashboard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsEditJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsEditJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/edit.js"
	name := "public/js/controllers/projects/edit.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsEnvironmentJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsEnvironmentJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/environment.js"
	name := "public/js/controllers/projects/environment.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsInventoryJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsInventoryJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/inventory.js"
	name := "public/js/controllers/projects/inventory.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsKeysJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsKeysJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/keys.js"
	name := "public/js/controllers/projects/keys.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsRepositoriesJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsRepositoriesJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/repositories.js"
	name := "public/js/controllers/projects/repositories.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsScheduleJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsScheduleJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/schedule.js"
	name := "public/js/controllers/projects/schedule.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsTaskrunnerJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsTaskrunnerJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/taskRunner.js"
	name := "public/js/controllers/projects/taskRunner.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsTemplatesJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsTemplatesJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/templates.js"
	name := "public/js/controllers/projects/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsUsersJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsUsersJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/controllers/projects/users.js"
	name := "public/js/controllers/projects/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesHostJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesHostJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/host.js"
	name := "public/js/factories/host.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesHostgroupJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesHostgroupJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/hostgroup.js"
	name := "public/js/factories/hostgroup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesIdentityJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesIdentityJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/identity.js"
	name := "public/js/factories/identity.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesJobJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesJobJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/job.js"
	name := "public/js/factories/job.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesPlaybookJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesPlaybookJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/playbook.js"
	name := "public/js/factories/playbook.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesProjectJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesProjectJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/project.js"
	name := "public/js/factories/project.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesTaskJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesTaskJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/task.js"
	name := "public/js/factories/task.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesUserJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesUserJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/factories/user.js"
	name := "public/js/factories/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesAuthJs reads file data from disk. It returns an error on failure.
func publicJsRoutesAuthJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/routes/auth.js"
	name := "public/js/routes/auth.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesProjectJs reads file data from disk. It returns an error on failure.
func publicJsRoutesProjectJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/routes/project.js"
	name := "public/js/routes/project.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesRouterJs reads file data from disk. It returns an error on failure.
func publicJsRoutesRouterJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/routes/router.js"
	name := "public/js/routes/router.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesHostgroupsJs reads file data from disk. It returns an error on failure.
func publicJsServicesHostgroupsJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/hostgroups.js"
	name := "public/js/services/hostgroups.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesIdentitiesJs reads file data from disk. It returns an error on failure.
func publicJsServicesIdentitiesJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/identities.js"
	name := "public/js/services/identities.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesJobsJs reads file data from disk. It returns an error on failure.
func publicJsServicesJobsJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/jobs.js"
	name := "public/js/services/jobs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesPlaybooksJs reads file data from disk. It returns an error on failure.
func publicJsServicesPlaybooksJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/playbooks.js"
	name := "public/js/services/playbooks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesTasksJs reads file data from disk. It returns an error on failure.
func publicJsServicesTasksJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/tasks.js"
	name := "public/js/services/tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesUserJs reads file data from disk. It returns an error on failure.
func publicJsServicesUserJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/user.js"
	name := "public/js/services/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesUsersJs reads file data from disk. It returns an error on failure.
func publicJsServicesUsersJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/js/services/users.js"
	name := "public/js/services/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorGit reads file data from disk. It returns an error on failure.
func publicVendorGit() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/.git"
	name := "public/vendor/.git"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularCouchPotatoJs reads file data from disk. It returns an error on failure.
func publicVendorAngularCouchPotatoJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-couch-potato.js"
	name := "public/vendor/angular-couch-potato.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularUiRouterMinJs reads file data from disk. It returns an error on failure.
func publicVendorAngularUiRouterMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-ui-router.min.js"
	name := "public/vendor/angular-ui-router.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularUiMinJs reads file data from disk. It returns an error on failure.
func publicVendorAngularUiMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-ui.min.js"
	name := "public/vendor/angular-ui.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularMinJs reads file data from disk. It returns an error on failure.
func publicVendorAngularMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular.min.js"
	name := "public/vendor/angular.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAsyncJs reads file data from disk. It returns an error on failure.
func publicVendorAsyncJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/async.js"
	name := "public/vendor/async.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorRequireMinJs reads file data from disk. It returns an error on failure.
func publicVendorRequireMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/require.min.js"
	name := "public/vendor/require.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularLoadingBarLoadingBarCss reads file data from disk. It returns an error on failure.
func publicVendorAngularLoadingBarLoadingBarCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-loading-bar/loading-bar.css"
	name := "public/vendor/angular-loading-bar/loading-bar.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularLoadingBarLoadingBarJs reads file data from disk. It returns an error on failure.
func publicVendorAngularLoadingBarLoadingBarJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-loading-bar/loading-bar.js"
	name := "public/vendor/angular-loading-bar/loading-bar.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorAngularLoadingBarLoadingBarMinJs reads file data from disk. It returns an error on failure.
func publicVendorAngularLoadingBarLoadingBarMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/angular-loading-bar/loading-bar.min.js"
	name := "public/vendor/angular-loading-bar/loading-bar.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapEditorconfig reads file data from disk. It returns an error on failure.
func publicVendorBootstrapEditorconfig() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/.editorconfig"
	name := "public/vendor/bootstrap/.editorconfig"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapGitattributes reads file data from disk. It returns an error on failure.
func publicVendorBootstrapGitattributes() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/.gitattributes"
	name := "public/vendor/bootstrap/.gitattributes"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapGitignore reads file data from disk. It returns an error on failure.
func publicVendorBootstrapGitignore() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/.gitignore"
	name := "public/vendor/bootstrap/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapReadmeMd reads file data from disk. It returns an error on failure.
func publicVendorBootstrapReadmeMd() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/README.md"
	name := "public/vendor/bootstrap/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapBowerJson reads file data from disk. It returns an error on failure.
func publicVendorBootstrapBowerJson() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/bower.json"
	name := "public/vendor/bootstrap/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapPackageJson reads file data from disk. It returns an error on failure.
func publicVendorBootstrapPackageJson() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/package.json"
	name := "public/vendor/bootstrap/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapThemeCss reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapThemeCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap-theme.css"
	name := "public/vendor/bootstrap/dist/css/bootstrap-theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapThemeCssMap reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapThemeCssMap() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap-theme.css.map"
	name := "public/vendor/bootstrap/dist/css/bootstrap-theme.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapThemeMinCss reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapThemeMinCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap-theme.min.css"
	name := "public/vendor/bootstrap/dist/css/bootstrap-theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapCss reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap.css"
	name := "public/vendor/bootstrap/dist/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapCssMap reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapCssMap() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap.css.map"
	name := "public/vendor/bootstrap/dist/css/bootstrap.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistCssBootstrapMinCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/css/bootstrap.min.css"
	name := "public/vendor/bootstrap/dist/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.eot"
	name := "public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.svg"
	name := "public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.ttf"
	name := "public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff"
	name := "public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2"
	name := "public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistJsBootstrapJs reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistJsBootstrapJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/js/bootstrap.js"
	name := "public/vendor/bootstrap/dist/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistJsBootstrapMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/js/bootstrap.min.js"
	name := "public/vendor/bootstrap/dist/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapDistJsNpmJs reads file data from disk. It returns an error on failure.
func publicVendorBootstrapDistJsNpmJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/dist/js/npm.js"
	name := "public/vendor/bootstrap/dist/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func publicVendorBootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot"
	name := "public/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func publicVendorBootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg"
	name := "public/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func publicVendorBootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	name := "public/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff"
	name := "public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	name := "public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessCsscombJson reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessCsscombJson() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/.csscomb.json"
	name := "public/vendor/bootstrap/less/.csscomb.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessCsslintrc reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessCsslintrc() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/.csslintrc"
	name := "public/vendor/bootstrap/less/.csslintrc"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessAlertsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessAlertsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/alerts.less"
	name := "public/vendor/bootstrap/less/alerts.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessBadgesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessBadgesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/badges.less"
	name := "public/vendor/bootstrap/less/badges.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessBootstrapLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessBootstrapLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/bootstrap.less"
	name := "public/vendor/bootstrap/less/bootstrap.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessBreadcrumbsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessBreadcrumbsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/breadcrumbs.less"
	name := "public/vendor/bootstrap/less/breadcrumbs.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessButtonGroupsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessButtonGroupsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/button-groups.less"
	name := "public/vendor/bootstrap/less/button-groups.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessButtonsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessButtonsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/buttons.less"
	name := "public/vendor/bootstrap/less/buttons.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessCarouselLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessCarouselLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/carousel.less"
	name := "public/vendor/bootstrap/less/carousel.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessCloseLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessCloseLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/close.less"
	name := "public/vendor/bootstrap/less/close.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessCodeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessCodeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/code.less"
	name := "public/vendor/bootstrap/less/code.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessComponentAnimationsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessComponentAnimationsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/component-animations.less"
	name := "public/vendor/bootstrap/less/component-animations.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessDropdownsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessDropdownsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/dropdowns.less"
	name := "public/vendor/bootstrap/less/dropdowns.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessFormsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessFormsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/forms.less"
	name := "public/vendor/bootstrap/less/forms.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessGlyphiconsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessGlyphiconsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/glyphicons.less"
	name := "public/vendor/bootstrap/less/glyphicons.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessGridLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessGridLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/grid.less"
	name := "public/vendor/bootstrap/less/grid.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessInputGroupsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessInputGroupsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/input-groups.less"
	name := "public/vendor/bootstrap/less/input-groups.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessJumbotronLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessJumbotronLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/jumbotron.less"
	name := "public/vendor/bootstrap/less/jumbotron.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessLabelsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessLabelsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/labels.less"
	name := "public/vendor/bootstrap/less/labels.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessListGroupLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessListGroupLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/list-group.less"
	name := "public/vendor/bootstrap/less/list-group.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMediaLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMediaLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/media.less"
	name := "public/vendor/bootstrap/less/media.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins.less"
	name := "public/vendor/bootstrap/less/mixins.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessModalsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessModalsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/modals.less"
	name := "public/vendor/bootstrap/less/modals.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessNavbarLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessNavbarLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/navbar.less"
	name := "public/vendor/bootstrap/less/navbar.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessNavsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessNavsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/navs.less"
	name := "public/vendor/bootstrap/less/navs.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessNormalizeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessNormalizeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/normalize.less"
	name := "public/vendor/bootstrap/less/normalize.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessPagerLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessPagerLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/pager.less"
	name := "public/vendor/bootstrap/less/pager.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessPaginationLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessPaginationLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/pagination.less"
	name := "public/vendor/bootstrap/less/pagination.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessPanelsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessPanelsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/panels.less"
	name := "public/vendor/bootstrap/less/panels.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessPopoversLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessPopoversLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/popovers.less"
	name := "public/vendor/bootstrap/less/popovers.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessPrintLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessPrintLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/print.less"
	name := "public/vendor/bootstrap/less/print.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessProgressBarsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessProgressBarsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/progress-bars.less"
	name := "public/vendor/bootstrap/less/progress-bars.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessResponsiveEmbedLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessResponsiveEmbedLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/responsive-embed.less"
	name := "public/vendor/bootstrap/less/responsive-embed.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessResponsiveUtilitiesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessResponsiveUtilitiesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/responsive-utilities.less"
	name := "public/vendor/bootstrap/less/responsive-utilities.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessScaffoldingLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessScaffoldingLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/scaffolding.less"
	name := "public/vendor/bootstrap/less/scaffolding.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessTablesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessTablesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/tables.less"
	name := "public/vendor/bootstrap/less/tables.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessThemeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessThemeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/theme.less"
	name := "public/vendor/bootstrap/less/theme.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessThumbnailsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessThumbnailsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/thumbnails.less"
	name := "public/vendor/bootstrap/less/thumbnails.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessTooltipLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessTooltipLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/tooltip.less"
	name := "public/vendor/bootstrap/less/tooltip.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessTypeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessTypeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/type.less"
	name := "public/vendor/bootstrap/less/type.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessUtilitiesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessUtilitiesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/utilities.less"
	name := "public/vendor/bootstrap/less/utilities.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessVariablesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessVariablesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/variables.less"
	name := "public/vendor/bootstrap/less/variables.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessWellsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessWellsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/wells.less"
	name := "public/vendor/bootstrap/less/wells.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsAlertsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsAlertsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/alerts.less"
	name := "public/vendor/bootstrap/less/mixins/alerts.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsBackgroundVariantLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsBackgroundVariantLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/background-variant.less"
	name := "public/vendor/bootstrap/less/mixins/background-variant.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsBorderRadiusLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsBorderRadiusLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/border-radius.less"
	name := "public/vendor/bootstrap/less/mixins/border-radius.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsButtonsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsButtonsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/buttons.less"
	name := "public/vendor/bootstrap/less/mixins/buttons.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsCenterBlockLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsCenterBlockLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/center-block.less"
	name := "public/vendor/bootstrap/less/mixins/center-block.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsClearfixLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsClearfixLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/clearfix.less"
	name := "public/vendor/bootstrap/less/mixins/clearfix.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsFormsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsFormsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/forms.less"
	name := "public/vendor/bootstrap/less/mixins/forms.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsGradientsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsGradientsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/gradients.less"
	name := "public/vendor/bootstrap/less/mixins/gradients.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsGridFrameworkLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsGridFrameworkLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/grid-framework.less"
	name := "public/vendor/bootstrap/less/mixins/grid-framework.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsGridLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsGridLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/grid.less"
	name := "public/vendor/bootstrap/less/mixins/grid.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsHideTextLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsHideTextLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/hide-text.less"
	name := "public/vendor/bootstrap/less/mixins/hide-text.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsImageLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsImageLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/image.less"
	name := "public/vendor/bootstrap/less/mixins/image.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsLabelsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsLabelsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/labels.less"
	name := "public/vendor/bootstrap/less/mixins/labels.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsListGroupLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsListGroupLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/list-group.less"
	name := "public/vendor/bootstrap/less/mixins/list-group.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsNavDividerLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsNavDividerLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/nav-divider.less"
	name := "public/vendor/bootstrap/less/mixins/nav-divider.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsNavVerticalAlignLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsNavVerticalAlignLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/nav-vertical-align.less"
	name := "public/vendor/bootstrap/less/mixins/nav-vertical-align.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsOpacityLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsOpacityLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/opacity.less"
	name := "public/vendor/bootstrap/less/mixins/opacity.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsPaginationLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsPaginationLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/pagination.less"
	name := "public/vendor/bootstrap/less/mixins/pagination.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsPanelsLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsPanelsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/panels.less"
	name := "public/vendor/bootstrap/less/mixins/panels.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsProgressBarLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsProgressBarLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/progress-bar.less"
	name := "public/vendor/bootstrap/less/mixins/progress-bar.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsResetFilterLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsResetFilterLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/reset-filter.less"
	name := "public/vendor/bootstrap/less/mixins/reset-filter.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsResetTextLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsResetTextLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/reset-text.less"
	name := "public/vendor/bootstrap/less/mixins/reset-text.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsResizeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsResizeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/resize.less"
	name := "public/vendor/bootstrap/less/mixins/resize.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsResponsiveVisibilityLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsResponsiveVisibilityLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/responsive-visibility.less"
	name := "public/vendor/bootstrap/less/mixins/responsive-visibility.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsSizeLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsSizeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/size.less"
	name := "public/vendor/bootstrap/less/mixins/size.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsTabFocusLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsTabFocusLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/tab-focus.less"
	name := "public/vendor/bootstrap/less/mixins/tab-focus.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsTableRowLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsTableRowLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/table-row.less"
	name := "public/vendor/bootstrap/less/mixins/table-row.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsTextEmphasisLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsTextEmphasisLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/text-emphasis.less"
	name := "public/vendor/bootstrap/less/mixins/text-emphasis.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsTextOverflowLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsTextOverflowLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/text-overflow.less"
	name := "public/vendor/bootstrap/less/mixins/text-overflow.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorBootstrapLessMixinsVendorPrefixesLess reads file data from disk. It returns an error on failure.
func publicVendorBootstrapLessMixinsVendorPrefixesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/bootstrap/less/mixins/vendor-prefixes.less"
	name := "public/vendor/bootstrap/less/mixins/vendor-prefixes.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeOtf() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/FontAwesome.otf"
	name := "public/vendor/fontawesome/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeWebfontEot() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/fontawesome-webfont.eot"
	name := "public/vendor/fontawesome/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/fontawesome-webfont.svg"
	name := "public/vendor/fontawesome/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/fontawesome-webfont.ttf"
	name := "public/vendor/fontawesome/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/fontawesome-webfont.woff"
	name := "public/vendor/fontawesome/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeFontsFontawesomeWebfontWoff2 reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeFontsFontawesomeWebfontWoff2() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/fonts/fontawesome-webfont.woff2"
	name := "public/vendor/fontawesome/fonts/fontawesome-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessAnimatedLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessAnimatedLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/animated.less"
	name := "public/vendor/fontawesome/less/animated.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessBorderedPulledLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessBorderedPulledLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/bordered-pulled.less"
	name := "public/vendor/fontawesome/less/bordered-pulled.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessCoreLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessCoreLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/core.less"
	name := "public/vendor/fontawesome/less/core.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessFixedWidthLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessFixedWidthLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/fixed-width.less"
	name := "public/vendor/fontawesome/less/fixed-width.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessFontAwesomeLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessFontAwesomeLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/font-awesome.less"
	name := "public/vendor/fontawesome/less/font-awesome.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessIconsLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessIconsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/icons.less"
	name := "public/vendor/fontawesome/less/icons.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessLargerLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessLargerLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/larger.less"
	name := "public/vendor/fontawesome/less/larger.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessListLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessListLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/list.less"
	name := "public/vendor/fontawesome/less/list.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessMixinsLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessMixinsLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/mixins.less"
	name := "public/vendor/fontawesome/less/mixins.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessPathLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessPathLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/path.less"
	name := "public/vendor/fontawesome/less/path.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessRotatedFlippedLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessRotatedFlippedLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/rotated-flipped.less"
	name := "public/vendor/fontawesome/less/rotated-flipped.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessStackedLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessStackedLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/stacked.less"
	name := "public/vendor/fontawesome/less/stacked.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorFontawesomeLessVariablesLess reads file data from disk. It returns an error on failure.
func publicVendorFontawesomeLessVariablesLess() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/fontawesome/less/variables.less"
	name := "public/vendor/fontawesome/less/variables.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorMomentMomentTzJs reads file data from disk. It returns an error on failure.
func publicVendorMomentMomentTzJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/moment/moment-tz.js"
	name := "public/vendor/moment/moment-tz.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorMomentMomentTzMinJs reads file data from disk. It returns an error on failure.
func publicVendorMomentMomentTzMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/moment/moment-tz.min.js"
	name := "public/vendor/moment/moment-tz.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorMomentMomentJs reads file data from disk. It returns an error on failure.
func publicVendorMomentMomentJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/moment/moment.js"
	name := "public/vendor/moment/moment.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorMomentMomentMinJs reads file data from disk. It returns an error on failure.
func publicVendorMomentMomentMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/moment/moment.min.js"
	name := "public/vendor/moment/moment.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorSweetalertSweetalertCss reads file data from disk. It returns an error on failure.
func publicVendorSweetalertSweetalertCss() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/sweetalert/sweetalert.css"
	name := "public/vendor/sweetalert/sweetalert.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicVendorSweetalertSweetalertMinJs reads file data from disk. It returns an error on failure.
func publicVendorSweetalertSweetalertMinJs() (*asset, error) {
	path := "/Users/m/p/semaphore/public/vendor/sweetalert/sweetalert.min.js"
	name := "public/vendor/sweetalert/sweetalert.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
	"db/migrations/v0.0.0.sql": dbMigrationsV000Sql,
	"db/migrations/v0.1.0.sql": dbMigrationsV010Sql,
	"db/migrations/v1.0.0.sql": dbMigrationsV100Sql,
	"db/migrations/v1.1.0.sql": dbMigrationsV110Sql,
	"db/migrations/v1.2.0.sql": dbMigrationsV120Sql,
	"db/migrations/v1.3.0.sql": dbMigrationsV130Sql,
	"db/migrations/v1.4.0.sql": dbMigrationsV140Sql,
	"db/migrations/v1.5.0.sql": dbMigrationsV150Sql,
	"db/migrations/v1.6.0.sql": dbMigrationsV160Sql,
	"db/migrations/v1.7.0.sql": dbMigrationsV170Sql,
	"db/migrations/v1.8.0.sql": dbMigrationsV180Sql,
	"db/migrations/v1.9.0.sql": dbMigrationsV190Sql,
	"db/migrations/v2.2.1.sql": dbMigrationsV221Sql,
	"db/migrations/v2.3.0.sql": dbMigrationsV230Sql,
	"public/css/.gitignore": publicCssGitignore,
	"public/css/login.less": publicCssLoginLess,
	"public/css/octocat.less": publicCssOctocatLess,
	"public/css/semaphore.css": publicCssSemaphoreCss,
	"public/css/semaphore.less": publicCssSemaphoreLess,
	"public/html/.gitignore": publicHtmlGitignore,
	"public/html/abstract.html": publicHtmlAbstractHtml,
	"public/html/abstract.pug": publicHtmlAbstractPug,
	"public/html/admin.html": publicHtmlAdminHtml,
	"public/html/admin.pug": publicHtmlAdminPug,
	"public/html/dashboard.html": publicHtmlDashboardHtml,
	"public/html/dashboard.pug": publicHtmlDashboardPug,
	"public/html/index.html": publicHtmlIndexHtml,
	"public/html/index.pug": publicHtmlIndexPug,
	"public/html/tasks.html": publicHtmlTasksHtml,
	"public/html/tasks.pug": publicHtmlTasksPug,
	"public/html/auth/login.html": publicHtmlAuthLoginHtml,
	"public/html/auth/login.pug": publicHtmlAuthLoginPug,
	"public/html/auth/logout.html": publicHtmlAuthLogoutHtml,
	"public/html/auth/logout.pug": publicHtmlAuthLogoutPug,
	"public/html/projects/add.html": publicHtmlProjectsAddHtml,
	"public/html/projects/add.pug": publicHtmlProjectsAddPug,
	"public/html/projects/container.html": publicHtmlProjectsContainerHtml,
	"public/html/projects/container.pug": publicHtmlProjectsContainerPug,
	"public/html/projects/createTaskModal.html": publicHtmlProjectsCreatetaskmodalHtml,
	"public/html/projects/createTaskModal.pug": publicHtmlProjectsCreatetaskmodalPug,
	"public/html/projects/dashboard.html": publicHtmlProjectsDashboardHtml,
	"public/html/projects/dashboard.pug": publicHtmlProjectsDashboardPug,
	"public/html/projects/edit.html": publicHtmlProjectsEditHtml,
	"public/html/projects/edit.pug": publicHtmlProjectsEditPug,
	"public/html/projects/schedule.html": publicHtmlProjectsScheduleHtml,
	"public/html/projects/schedule.pug": publicHtmlProjectsSchedulePug,
	"public/html/projects/taskModal.html": publicHtmlProjectsTaskmodalHtml,
	"public/html/projects/taskModal.pug": publicHtmlProjectsTaskmodalPug,
	"public/html/projects/environment/add.html": publicHtmlProjectsEnvironmentAddHtml,
	"public/html/projects/environment/add.pug": publicHtmlProjectsEnvironmentAddPug,
	"public/html/projects/environment/list.html": publicHtmlProjectsEnvironmentListHtml,
	"public/html/projects/environment/list.pug": publicHtmlProjectsEnvironmentListPug,
	"public/html/projects/inventory/add.html": publicHtmlProjectsInventoryAddHtml,
	"public/html/projects/inventory/add.pug": publicHtmlProjectsInventoryAddPug,
	"public/html/projects/inventory/edit.html": publicHtmlProjectsInventoryEditHtml,
	"public/html/projects/inventory/edit.pug": publicHtmlProjectsInventoryEditPug,
	"public/html/projects/inventory/list.html": publicHtmlProjectsInventoryListHtml,
	"public/html/projects/inventory/list.pug": publicHtmlProjectsInventoryListPug,
	"public/html/projects/keys/add.html": publicHtmlProjectsKeysAddHtml,
	"public/html/projects/keys/add.pug": publicHtmlProjectsKeysAddPug,
	"public/html/projects/keys/list.html": publicHtmlProjectsKeysListHtml,
	"public/html/projects/keys/list.pug": publicHtmlProjectsKeysListPug,
	"public/html/projects/repositories/add.html": publicHtmlProjectsRepositoriesAddHtml,
	"public/html/projects/repositories/add.pug": publicHtmlProjectsRepositoriesAddPug,
	"public/html/projects/repositories/list.html": publicHtmlProjectsRepositoriesListHtml,
	"public/html/projects/repositories/list.pug": publicHtmlProjectsRepositoriesListPug,
	"public/html/projects/templates/add.html": publicHtmlProjectsTemplatesAddHtml,
	"public/html/projects/templates/add.pug": publicHtmlProjectsTemplatesAddPug,
	"public/html/projects/templates/list.html": publicHtmlProjectsTemplatesListHtml,
	"public/html/projects/templates/list.pug": publicHtmlProjectsTemplatesListPug,
	"public/html/projects/users/add.html": publicHtmlProjectsUsersAddHtml,
	"public/html/projects/users/add.pug": publicHtmlProjectsUsersAddPug,
	"public/html/projects/users/list.html": publicHtmlProjectsUsersListHtml,
	"public/html/projects/users/list.pug": publicHtmlProjectsUsersListPug,
	"public/html/users/add.html": publicHtmlUsersAddHtml,
	"public/html/users/add.pug": publicHtmlUsersAddPug,
	"public/html/users/list.html": publicHtmlUsersListHtml,
	"public/html/users/list.pug": publicHtmlUsersListPug,
	"public/html/users/user.html": publicHtmlUsersUserHtml,
	"public/html/users/user.pug": publicHtmlUsersUserPug,
	"public/img/icon.png": publicImgIconPng,
	"public/img/logo.png": publicImgLogoPng,
	"public/img/screenshot.png": publicImgScreenshotPng,
	"public/js/app.js": publicJsAppJs,
	"public/js/bundle.js": publicJsBundleJs,
	"public/js/controllers/admin.js": publicJsControllersAdminJs,
	"public/js/controllers/dashboard.js": publicJsControllersDashboardJs,
	"public/js/controllers/login.js": publicJsControllersLoginJs,
	"public/js/controllers/tasks.js": publicJsControllersTasksJs,
	"public/js/controllers/user.js": publicJsControllersUserJs,
	"public/js/controllers/users.js": publicJsControllersUsersJs,
	"public/js/controllers/projects/dashboard.js": publicJsControllersProjectsDashboardJs,
	"public/js/controllers/projects/edit.js": publicJsControllersProjectsEditJs,
	"public/js/controllers/projects/environment.js": publicJsControllersProjectsEnvironmentJs,
	"public/js/controllers/projects/inventory.js": publicJsControllersProjectsInventoryJs,
	"public/js/controllers/projects/keys.js": publicJsControllersProjectsKeysJs,
	"public/js/controllers/projects/repositories.js": publicJsControllersProjectsRepositoriesJs,
	"public/js/controllers/projects/schedule.js": publicJsControllersProjectsScheduleJs,
	"public/js/controllers/projects/taskRunner.js": publicJsControllersProjectsTaskrunnerJs,
	"public/js/controllers/projects/templates.js": publicJsControllersProjectsTemplatesJs,
	"public/js/controllers/projects/users.js": publicJsControllersProjectsUsersJs,
	"public/js/factories/host.js": publicJsFactoriesHostJs,
	"public/js/factories/hostgroup.js": publicJsFactoriesHostgroupJs,
	"public/js/factories/identity.js": publicJsFactoriesIdentityJs,
	"public/js/factories/job.js": publicJsFactoriesJobJs,
	"public/js/factories/playbook.js": publicJsFactoriesPlaybookJs,
	"public/js/factories/project.js": publicJsFactoriesProjectJs,
	"public/js/factories/task.js": publicJsFactoriesTaskJs,
	"public/js/factories/user.js": publicJsFactoriesUserJs,
	"public/js/routes/auth.js": publicJsRoutesAuthJs,
	"public/js/routes/project.js": publicJsRoutesProjectJs,
	"public/js/routes/router.js": publicJsRoutesRouterJs,
	"public/js/services/hostgroups.js": publicJsServicesHostgroupsJs,
	"public/js/services/identities.js": publicJsServicesIdentitiesJs,
	"public/js/services/jobs.js": publicJsServicesJobsJs,
	"public/js/services/playbooks.js": publicJsServicesPlaybooksJs,
	"public/js/services/tasks.js": publicJsServicesTasksJs,
	"public/js/services/user.js": publicJsServicesUserJs,
	"public/js/services/users.js": publicJsServicesUsersJs,
	"public/vendor/.git": publicVendorGit,
	"public/vendor/angular-couch-potato.js": publicVendorAngularCouchPotatoJs,
	"public/vendor/angular-ui-router.min.js": publicVendorAngularUiRouterMinJs,
	"public/vendor/angular-ui.min.js": publicVendorAngularUiMinJs,
	"public/vendor/angular.min.js": publicVendorAngularMinJs,
	"public/vendor/async.js": publicVendorAsyncJs,
	"public/vendor/require.min.js": publicVendorRequireMinJs,
	"public/vendor/angular-loading-bar/loading-bar.css": publicVendorAngularLoadingBarLoadingBarCss,
	"public/vendor/angular-loading-bar/loading-bar.js": publicVendorAngularLoadingBarLoadingBarJs,
	"public/vendor/angular-loading-bar/loading-bar.min.js": publicVendorAngularLoadingBarLoadingBarMinJs,
	"public/vendor/bootstrap/.editorconfig": publicVendorBootstrapEditorconfig,
	"public/vendor/bootstrap/.gitattributes": publicVendorBootstrapGitattributes,
	"public/vendor/bootstrap/.gitignore": publicVendorBootstrapGitignore,
	"public/vendor/bootstrap/README.md": publicVendorBootstrapReadmeMd,
	"public/vendor/bootstrap/bower.json": publicVendorBootstrapBowerJson,
	"public/vendor/bootstrap/package.json": publicVendorBootstrapPackageJson,
	"public/vendor/bootstrap/dist/css/bootstrap-theme.css": publicVendorBootstrapDistCssBootstrapThemeCss,
	"public/vendor/bootstrap/dist/css/bootstrap-theme.css.map": publicVendorBootstrapDistCssBootstrapThemeCssMap,
	"public/vendor/bootstrap/dist/css/bootstrap-theme.min.css": publicVendorBootstrapDistCssBootstrapThemeMinCss,
	"public/vendor/bootstrap/dist/css/bootstrap.css": publicVendorBootstrapDistCssBootstrapCss,
	"public/vendor/bootstrap/dist/css/bootstrap.css.map": publicVendorBootstrapDistCssBootstrapCssMap,
	"public/vendor/bootstrap/dist/css/bootstrap.min.css": publicVendorBootstrapDistCssBootstrapMinCss,
	"public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.eot": publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularEot,
	"public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.svg": publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularSvg,
	"public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.ttf": publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularTtf,
	"public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff": publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff,
	"public/vendor/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2": publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff2,
	"public/vendor/bootstrap/dist/js/bootstrap.js": publicVendorBootstrapDistJsBootstrapJs,
	"public/vendor/bootstrap/dist/js/bootstrap.min.js": publicVendorBootstrapDistJsBootstrapMinJs,
	"public/vendor/bootstrap/dist/js/npm.js": publicVendorBootstrapDistJsNpmJs,
	"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot": publicVendorBootstrapFontsGlyphiconsHalflingsRegularEot,
	"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg": publicVendorBootstrapFontsGlyphiconsHalflingsRegularSvg,
	"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf": publicVendorBootstrapFontsGlyphiconsHalflingsRegularTtf,
	"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff": publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff,
	"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2": publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff2,
	"public/vendor/bootstrap/less/.csscomb.json": publicVendorBootstrapLessCsscombJson,
	"public/vendor/bootstrap/less/.csslintrc": publicVendorBootstrapLessCsslintrc,
	"public/vendor/bootstrap/less/alerts.less": publicVendorBootstrapLessAlertsLess,
	"public/vendor/bootstrap/less/badges.less": publicVendorBootstrapLessBadgesLess,
	"public/vendor/bootstrap/less/bootstrap.less": publicVendorBootstrapLessBootstrapLess,
	"public/vendor/bootstrap/less/breadcrumbs.less": publicVendorBootstrapLessBreadcrumbsLess,
	"public/vendor/bootstrap/less/button-groups.less": publicVendorBootstrapLessButtonGroupsLess,
	"public/vendor/bootstrap/less/buttons.less": publicVendorBootstrapLessButtonsLess,
	"public/vendor/bootstrap/less/carousel.less": publicVendorBootstrapLessCarouselLess,
	"public/vendor/bootstrap/less/close.less": publicVendorBootstrapLessCloseLess,
	"public/vendor/bootstrap/less/code.less": publicVendorBootstrapLessCodeLess,
	"public/vendor/bootstrap/less/component-animations.less": publicVendorBootstrapLessComponentAnimationsLess,
	"public/vendor/bootstrap/less/dropdowns.less": publicVendorBootstrapLessDropdownsLess,
	"public/vendor/bootstrap/less/forms.less": publicVendorBootstrapLessFormsLess,
	"public/vendor/bootstrap/less/glyphicons.less": publicVendorBootstrapLessGlyphiconsLess,
	"public/vendor/bootstrap/less/grid.less": publicVendorBootstrapLessGridLess,
	"public/vendor/bootstrap/less/input-groups.less": publicVendorBootstrapLessInputGroupsLess,
	"public/vendor/bootstrap/less/jumbotron.less": publicVendorBootstrapLessJumbotronLess,
	"public/vendor/bootstrap/less/labels.less": publicVendorBootstrapLessLabelsLess,
	"public/vendor/bootstrap/less/list-group.less": publicVendorBootstrapLessListGroupLess,
	"public/vendor/bootstrap/less/media.less": publicVendorBootstrapLessMediaLess,
	"public/vendor/bootstrap/less/mixins.less": publicVendorBootstrapLessMixinsLess,
	"public/vendor/bootstrap/less/modals.less": publicVendorBootstrapLessModalsLess,
	"public/vendor/bootstrap/less/navbar.less": publicVendorBootstrapLessNavbarLess,
	"public/vendor/bootstrap/less/navs.less": publicVendorBootstrapLessNavsLess,
	"public/vendor/bootstrap/less/normalize.less": publicVendorBootstrapLessNormalizeLess,
	"public/vendor/bootstrap/less/pager.less": publicVendorBootstrapLessPagerLess,
	"public/vendor/bootstrap/less/pagination.less": publicVendorBootstrapLessPaginationLess,
	"public/vendor/bootstrap/less/panels.less": publicVendorBootstrapLessPanelsLess,
	"public/vendor/bootstrap/less/popovers.less": publicVendorBootstrapLessPopoversLess,
	"public/vendor/bootstrap/less/print.less": publicVendorBootstrapLessPrintLess,
	"public/vendor/bootstrap/less/progress-bars.less": publicVendorBootstrapLessProgressBarsLess,
	"public/vendor/bootstrap/less/responsive-embed.less": publicVendorBootstrapLessResponsiveEmbedLess,
	"public/vendor/bootstrap/less/responsive-utilities.less": publicVendorBootstrapLessResponsiveUtilitiesLess,
	"public/vendor/bootstrap/less/scaffolding.less": publicVendorBootstrapLessScaffoldingLess,
	"public/vendor/bootstrap/less/tables.less": publicVendorBootstrapLessTablesLess,
	"public/vendor/bootstrap/less/theme.less": publicVendorBootstrapLessThemeLess,
	"public/vendor/bootstrap/less/thumbnails.less": publicVendorBootstrapLessThumbnailsLess,
	"public/vendor/bootstrap/less/tooltip.less": publicVendorBootstrapLessTooltipLess,
	"public/vendor/bootstrap/less/type.less": publicVendorBootstrapLessTypeLess,
	"public/vendor/bootstrap/less/utilities.less": publicVendorBootstrapLessUtilitiesLess,
	"public/vendor/bootstrap/less/variables.less": publicVendorBootstrapLessVariablesLess,
	"public/vendor/bootstrap/less/wells.less": publicVendorBootstrapLessWellsLess,
	"public/vendor/bootstrap/less/mixins/alerts.less": publicVendorBootstrapLessMixinsAlertsLess,
	"public/vendor/bootstrap/less/mixins/background-variant.less": publicVendorBootstrapLessMixinsBackgroundVariantLess,
	"public/vendor/bootstrap/less/mixins/border-radius.less": publicVendorBootstrapLessMixinsBorderRadiusLess,
	"public/vendor/bootstrap/less/mixins/buttons.less": publicVendorBootstrapLessMixinsButtonsLess,
	"public/vendor/bootstrap/less/mixins/center-block.less": publicVendorBootstrapLessMixinsCenterBlockLess,
	"public/vendor/bootstrap/less/mixins/clearfix.less": publicVendorBootstrapLessMixinsClearfixLess,
	"public/vendor/bootstrap/less/mixins/forms.less": publicVendorBootstrapLessMixinsFormsLess,
	"public/vendor/bootstrap/less/mixins/gradients.less": publicVendorBootstrapLessMixinsGradientsLess,
	"public/vendor/bootstrap/less/mixins/grid-framework.less": publicVendorBootstrapLessMixinsGridFrameworkLess,
	"public/vendor/bootstrap/less/mixins/grid.less": publicVendorBootstrapLessMixinsGridLess,
	"public/vendor/bootstrap/less/mixins/hide-text.less": publicVendorBootstrapLessMixinsHideTextLess,
	"public/vendor/bootstrap/less/mixins/image.less": publicVendorBootstrapLessMixinsImageLess,
	"public/vendor/bootstrap/less/mixins/labels.less": publicVendorBootstrapLessMixinsLabelsLess,
	"public/vendor/bootstrap/less/mixins/list-group.less": publicVendorBootstrapLessMixinsListGroupLess,
	"public/vendor/bootstrap/less/mixins/nav-divider.less": publicVendorBootstrapLessMixinsNavDividerLess,
	"public/vendor/bootstrap/less/mixins/nav-vertical-align.less": publicVendorBootstrapLessMixinsNavVerticalAlignLess,
	"public/vendor/bootstrap/less/mixins/opacity.less": publicVendorBootstrapLessMixinsOpacityLess,
	"public/vendor/bootstrap/less/mixins/pagination.less": publicVendorBootstrapLessMixinsPaginationLess,
	"public/vendor/bootstrap/less/mixins/panels.less": publicVendorBootstrapLessMixinsPanelsLess,
	"public/vendor/bootstrap/less/mixins/progress-bar.less": publicVendorBootstrapLessMixinsProgressBarLess,
	"public/vendor/bootstrap/less/mixins/reset-filter.less": publicVendorBootstrapLessMixinsResetFilterLess,
	"public/vendor/bootstrap/less/mixins/reset-text.less": publicVendorBootstrapLessMixinsResetTextLess,
	"public/vendor/bootstrap/less/mixins/resize.less": publicVendorBootstrapLessMixinsResizeLess,
	"public/vendor/bootstrap/less/mixins/responsive-visibility.less": publicVendorBootstrapLessMixinsResponsiveVisibilityLess,
	"public/vendor/bootstrap/less/mixins/size.less": publicVendorBootstrapLessMixinsSizeLess,
	"public/vendor/bootstrap/less/mixins/tab-focus.less": publicVendorBootstrapLessMixinsTabFocusLess,
	"public/vendor/bootstrap/less/mixins/table-row.less": publicVendorBootstrapLessMixinsTableRowLess,
	"public/vendor/bootstrap/less/mixins/text-emphasis.less": publicVendorBootstrapLessMixinsTextEmphasisLess,
	"public/vendor/bootstrap/less/mixins/text-overflow.less": publicVendorBootstrapLessMixinsTextOverflowLess,
	"public/vendor/bootstrap/less/mixins/vendor-prefixes.less": publicVendorBootstrapLessMixinsVendorPrefixesLess,
	"public/vendor/fontawesome/fonts/FontAwesome.otf": publicVendorFontawesomeFontsFontawesomeOtf,
	"public/vendor/fontawesome/fonts/fontawesome-webfont.eot": publicVendorFontawesomeFontsFontawesomeWebfontEot,
	"public/vendor/fontawesome/fonts/fontawesome-webfont.svg": publicVendorFontawesomeFontsFontawesomeWebfontSvg,
	"public/vendor/fontawesome/fonts/fontawesome-webfont.ttf": publicVendorFontawesomeFontsFontawesomeWebfontTtf,
	"public/vendor/fontawesome/fonts/fontawesome-webfont.woff": publicVendorFontawesomeFontsFontawesomeWebfontWoff,
	"public/vendor/fontawesome/fonts/fontawesome-webfont.woff2": publicVendorFontawesomeFontsFontawesomeWebfontWoff2,
	"public/vendor/fontawesome/less/animated.less": publicVendorFontawesomeLessAnimatedLess,
	"public/vendor/fontawesome/less/bordered-pulled.less": publicVendorFontawesomeLessBorderedPulledLess,
	"public/vendor/fontawesome/less/core.less": publicVendorFontawesomeLessCoreLess,
	"public/vendor/fontawesome/less/fixed-width.less": publicVendorFontawesomeLessFixedWidthLess,
	"public/vendor/fontawesome/less/font-awesome.less": publicVendorFontawesomeLessFontAwesomeLess,
	"public/vendor/fontawesome/less/icons.less": publicVendorFontawesomeLessIconsLess,
	"public/vendor/fontawesome/less/larger.less": publicVendorFontawesomeLessLargerLess,
	"public/vendor/fontawesome/less/list.less": publicVendorFontawesomeLessListLess,
	"public/vendor/fontawesome/less/mixins.less": publicVendorFontawesomeLessMixinsLess,
	"public/vendor/fontawesome/less/path.less": publicVendorFontawesomeLessPathLess,
	"public/vendor/fontawesome/less/rotated-flipped.less": publicVendorFontawesomeLessRotatedFlippedLess,
	"public/vendor/fontawesome/less/stacked.less": publicVendorFontawesomeLessStackedLess,
	"public/vendor/fontawesome/less/variables.less": publicVendorFontawesomeLessVariablesLess,
	"public/vendor/moment/moment-tz.js": publicVendorMomentMomentTzJs,
	"public/vendor/moment/moment-tz.min.js": publicVendorMomentMomentTzMinJs,
	"public/vendor/moment/moment.js": publicVendorMomentMomentJs,
	"public/vendor/moment/moment.min.js": publicVendorMomentMomentMinJs,
	"public/vendor/sweetalert/sweetalert.css": publicVendorSweetalertSweetalertCss,
	"public/vendor/sweetalert/sweetalert.min.js": publicVendorSweetalertSweetalertMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"v0.0.0.sql": &bintree{dbMigrationsV000Sql, map[string]*bintree{}},
			"v0.1.0.sql": &bintree{dbMigrationsV010Sql, map[string]*bintree{}},
			"v1.0.0.sql": &bintree{dbMigrationsV100Sql, map[string]*bintree{}},
			"v1.1.0.sql": &bintree{dbMigrationsV110Sql, map[string]*bintree{}},
			"v1.2.0.sql": &bintree{dbMigrationsV120Sql, map[string]*bintree{}},
			"v1.3.0.sql": &bintree{dbMigrationsV130Sql, map[string]*bintree{}},
			"v1.4.0.sql": &bintree{dbMigrationsV140Sql, map[string]*bintree{}},
			"v1.5.0.sql": &bintree{dbMigrationsV150Sql, map[string]*bintree{}},
			"v1.6.0.sql": &bintree{dbMigrationsV160Sql, map[string]*bintree{}},
			"v1.7.0.sql": &bintree{dbMigrationsV170Sql, map[string]*bintree{}},
			"v1.8.0.sql": &bintree{dbMigrationsV180Sql, map[string]*bintree{}},
			"v1.9.0.sql": &bintree{dbMigrationsV190Sql, map[string]*bintree{}},
			"v2.2.1.sql": &bintree{dbMigrationsV221Sql, map[string]*bintree{}},
			"v2.3.0.sql": &bintree{dbMigrationsV230Sql, map[string]*bintree{}},
		}},
	}},
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{publicCssGitignore, map[string]*bintree{}},
			"login.less": &bintree{publicCssLoginLess, map[string]*bintree{}},
			"octocat.less": &bintree{publicCssOctocatLess, map[string]*bintree{}},
			"semaphore.css": &bintree{publicCssSemaphoreCss, map[string]*bintree{}},
			"semaphore.less": &bintree{publicCssSemaphoreLess, map[string]*bintree{}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{publicHtmlGitignore, map[string]*bintree{}},
			"abstract.html": &bintree{publicHtmlAbstractHtml, map[string]*bintree{}},
			"abstract.pug": &bintree{publicHtmlAbstractPug, map[string]*bintree{}},
			"admin.html": &bintree{publicHtmlAdminHtml, map[string]*bintree{}},
			"admin.pug": &bintree{publicHtmlAdminPug, map[string]*bintree{}},
			"auth": &bintree{nil, map[string]*bintree{
				"login.html": &bintree{publicHtmlAuthLoginHtml, map[string]*bintree{}},
				"login.pug": &bintree{publicHtmlAuthLoginPug, map[string]*bintree{}},
				"logout.html": &bintree{publicHtmlAuthLogoutHtml, map[string]*bintree{}},
				"logout.pug": &bintree{publicHtmlAuthLogoutPug, map[string]*bintree{}},
			}},
			"dashboard.html": &bintree{publicHtmlDashboardHtml, map[string]*bintree{}},
			"dashboard.pug": &bintree{publicHtmlDashboardPug, map[string]*bintree{}},
			"index.html": &bintree{publicHtmlIndexHtml, map[string]*bintree{}},
			"index.pug": &bintree{publicHtmlIndexPug, map[string]*bintree{}},
			"projects": &bintree{nil, map[string]*bintree{
				"add.html": &bintree{publicHtmlProjectsAddHtml, map[string]*bintree{}},
				"add.pug": &bintree{publicHtmlProjectsAddPug, map[string]*bintree{}},
				"container.html": &bintree{publicHtmlProjectsContainerHtml, map[string]*bintree{}},
				"container.pug": &bintree{publicHtmlProjectsContainerPug, map[string]*bintree{}},
				"createTaskModal.html": &bintree{publicHtmlProjectsCreatetaskmodalHtml, map[string]*bintree{}},
				"createTaskModal.pug": &bintree{publicHtmlProjectsCreatetaskmodalPug, map[string]*bintree{}},
				"dashboard.html": &bintree{publicHtmlProjectsDashboardHtml, map[string]*bintree{}},
				"dashboard.pug": &bintree{publicHtmlProjectsDashboardPug, map[string]*bintree{}},
				"edit.html": &bintree{publicHtmlProjectsEditHtml, map[string]*bintree{}},
				"edit.pug": &bintree{publicHtmlProjectsEditPug, map[string]*bintree{}},
				"environment": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsEnvironmentAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsEnvironmentAddPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsEnvironmentListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsEnvironmentListPug, map[string]*bintree{}},
				}},
				"inventory": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsInventoryAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsInventoryAddPug, map[string]*bintree{}},
					"edit.html": &bintree{publicHtmlProjectsInventoryEditHtml, map[string]*bintree{}},
					"edit.pug": &bintree{publicHtmlProjectsInventoryEditPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsInventoryListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsInventoryListPug, map[string]*bintree{}},
				}},
				"keys": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsKeysAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsKeysAddPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsKeysListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsKeysListPug, map[string]*bintree{}},
				}},
				"repositories": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsRepositoriesAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsRepositoriesAddPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsRepositoriesListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsRepositoriesListPug, map[string]*bintree{}},
				}},
				"schedule.html": &bintree{publicHtmlProjectsScheduleHtml, map[string]*bintree{}},
				"schedule.pug": &bintree{publicHtmlProjectsSchedulePug, map[string]*bintree{}},
				"taskModal.html": &bintree{publicHtmlProjectsTaskmodalHtml, map[string]*bintree{}},
				"taskModal.pug": &bintree{publicHtmlProjectsTaskmodalPug, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsTemplatesAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsTemplatesAddPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsTemplatesListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsTemplatesListPug, map[string]*bintree{}},
				}},
				"users": &bintree{nil, map[string]*bintree{
					"add.html": &bintree{publicHtmlProjectsUsersAddHtml, map[string]*bintree{}},
					"add.pug": &bintree{publicHtmlProjectsUsersAddPug, map[string]*bintree{}},
					"list.html": &bintree{publicHtmlProjectsUsersListHtml, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsUsersListPug, map[string]*bintree{}},
				}},
			}},
			"tasks.html": &bintree{publicHtmlTasksHtml, map[string]*bintree{}},
			"tasks.pug": &bintree{publicHtmlTasksPug, map[string]*bintree{}},
			"users": &bintree{nil, map[string]*bintree{
				"add.html": &bintree{publicHtmlUsersAddHtml, map[string]*bintree{}},
				"add.pug": &bintree{publicHtmlUsersAddPug, map[string]*bintree{}},
				"list.html": &bintree{publicHtmlUsersListHtml, map[string]*bintree{}},
				"list.pug": &bintree{publicHtmlUsersListPug, map[string]*bintree{}},
				"user.html": &bintree{publicHtmlUsersUserHtml, map[string]*bintree{}},
				"user.pug": &bintree{publicHtmlUsersUserPug, map[string]*bintree{}},
			}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"icon.png": &bintree{publicImgIconPng, map[string]*bintree{}},
			"logo.png": &bintree{publicImgLogoPng, map[string]*bintree{}},
			"screenshot.png": &bintree{publicImgScreenshotPng, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{publicJsAppJs, map[string]*bintree{}},
			"bundle.js": &bintree{publicJsBundleJs, map[string]*bintree{}},
			"controllers": &bintree{nil, map[string]*bintree{
				"admin.js": &bintree{publicJsControllersAdminJs, map[string]*bintree{}},
				"dashboard.js": &bintree{publicJsControllersDashboardJs, map[string]*bintree{}},
				"login.js": &bintree{publicJsControllersLoginJs, map[string]*bintree{}},
				"projects": &bintree{nil, map[string]*bintree{
					"dashboard.js": &bintree{publicJsControllersProjectsDashboardJs, map[string]*bintree{}},
					"edit.js": &bintree{publicJsControllersProjectsEditJs, map[string]*bintree{}},
					"environment.js": &bintree{publicJsControllersProjectsEnvironmentJs, map[string]*bintree{}},
					"inventory.js": &bintree{publicJsControllersProjectsInventoryJs, map[string]*bintree{}},
					"keys.js": &bintree{publicJsControllersProjectsKeysJs, map[string]*bintree{}},
					"repositories.js": &bintree{publicJsControllersProjectsRepositoriesJs, map[string]*bintree{}},
					"schedule.js": &bintree{publicJsControllersProjectsScheduleJs, map[string]*bintree{}},
					"taskRunner.js": &bintree{publicJsControllersProjectsTaskrunnerJs, map[string]*bintree{}},
					"templates.js": &bintree{publicJsControllersProjectsTemplatesJs, map[string]*bintree{}},
					"users.js": &bintree{publicJsControllersProjectsUsersJs, map[string]*bintree{}},
				}},
				"tasks.js": &bintree{publicJsControllersTasksJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsControllersUserJs, map[string]*bintree{}},
				"users.js": &bintree{publicJsControllersUsersJs, map[string]*bintree{}},
			}},
			"factories": &bintree{nil, map[string]*bintree{
				"host.js": &bintree{publicJsFactoriesHostJs, map[string]*bintree{}},
				"hostgroup.js": &bintree{publicJsFactoriesHostgroupJs, map[string]*bintree{}},
				"identity.js": &bintree{publicJsFactoriesIdentityJs, map[string]*bintree{}},
				"job.js": &bintree{publicJsFactoriesJobJs, map[string]*bintree{}},
				"playbook.js": &bintree{publicJsFactoriesPlaybookJs, map[string]*bintree{}},
				"project.js": &bintree{publicJsFactoriesProjectJs, map[string]*bintree{}},
				"task.js": &bintree{publicJsFactoriesTaskJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsFactoriesUserJs, map[string]*bintree{}},
			}},
			"routes": &bintree{nil, map[string]*bintree{
				"auth.js": &bintree{publicJsRoutesAuthJs, map[string]*bintree{}},
				"project.js": &bintree{publicJsRoutesProjectJs, map[string]*bintree{}},
				"router.js": &bintree{publicJsRoutesRouterJs, map[string]*bintree{}},
			}},
			"services": &bintree{nil, map[string]*bintree{
				"hostgroups.js": &bintree{publicJsServicesHostgroupsJs, map[string]*bintree{}},
				"identities.js": &bintree{publicJsServicesIdentitiesJs, map[string]*bintree{}},
				"jobs.js": &bintree{publicJsServicesJobsJs, map[string]*bintree{}},
				"playbooks.js": &bintree{publicJsServicesPlaybooksJs, map[string]*bintree{}},
				"tasks.js": &bintree{publicJsServicesTasksJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsServicesUserJs, map[string]*bintree{}},
				"users.js": &bintree{publicJsServicesUsersJs, map[string]*bintree{}},
			}},
		}},
		"vendor": &bintree{nil, map[string]*bintree{
			".git": &bintree{publicVendorGit, map[string]*bintree{}},
			"angular-couch-potato.js": &bintree{publicVendorAngularCouchPotatoJs, map[string]*bintree{}},
			"angular-loading-bar": &bintree{nil, map[string]*bintree{
				"loading-bar.css": &bintree{publicVendorAngularLoadingBarLoadingBarCss, map[string]*bintree{}},
				"loading-bar.js": &bintree{publicVendorAngularLoadingBarLoadingBarJs, map[string]*bintree{}},
				"loading-bar.min.js": &bintree{publicVendorAngularLoadingBarLoadingBarMinJs, map[string]*bintree{}},
			}},
			"angular-ui-router.min.js": &bintree{publicVendorAngularUiRouterMinJs, map[string]*bintree{}},
			"angular-ui.min.js": &bintree{publicVendorAngularUiMinJs, map[string]*bintree{}},
			"angular.min.js": &bintree{publicVendorAngularMinJs, map[string]*bintree{}},
			"async.js": &bintree{publicVendorAsyncJs, map[string]*bintree{}},
			"bootstrap": &bintree{nil, map[string]*bintree{
				".editorconfig": &bintree{publicVendorBootstrapEditorconfig, map[string]*bintree{}},
				".gitattributes": &bintree{publicVendorBootstrapGitattributes, map[string]*bintree{}},
				".gitignore": &bintree{publicVendorBootstrapGitignore, map[string]*bintree{}},
				"README.md": &bintree{publicVendorBootstrapReadmeMd, map[string]*bintree{}},
				"bower.json": &bintree{publicVendorBootstrapBowerJson, map[string]*bintree{}},
				"dist": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap-theme.css": &bintree{publicVendorBootstrapDistCssBootstrapThemeCss, map[string]*bintree{}},
						"bootstrap-theme.css.map": &bintree{publicVendorBootstrapDistCssBootstrapThemeCssMap, map[string]*bintree{}},
						"bootstrap-theme.min.css": &bintree{publicVendorBootstrapDistCssBootstrapThemeMinCss, map[string]*bintree{}},
						"bootstrap.css": &bintree{publicVendorBootstrapDistCssBootstrapCss, map[string]*bintree{}},
						"bootstrap.css.map": &bintree{publicVendorBootstrapDistCssBootstrapCssMap, map[string]*bintree{}},
						"bootstrap.min.css": &bintree{publicVendorBootstrapDistCssBootstrapMinCss, map[string]*bintree{}},
					}},
					"fonts": &bintree{nil, map[string]*bintree{
						"glyphicons-halflings-regular.eot": &bintree{publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
						"glyphicons-halflings-regular.svg": &bintree{publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
						"glyphicons-halflings-regular.ttf": &bintree{publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
						"glyphicons-halflings-regular.woff": &bintree{publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
						"glyphicons-halflings-regular.woff2": &bintree{publicVendorBootstrapDistFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"bootstrap.js": &bintree{publicVendorBootstrapDistJsBootstrapJs, map[string]*bintree{}},
						"bootstrap.min.js": &bintree{publicVendorBootstrapDistJsBootstrapMinJs, map[string]*bintree{}},
						"npm.js": &bintree{publicVendorBootstrapDistJsNpmJs, map[string]*bintree{}},
					}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"glyphicons-halflings-regular.eot": &bintree{publicVendorBootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
					"glyphicons-halflings-regular.svg": &bintree{publicVendorBootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
					"glyphicons-halflings-regular.ttf": &bintree{publicVendorBootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff": &bintree{publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff2": &bintree{publicVendorBootstrapFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
				}},
				"less": &bintree{nil, map[string]*bintree{
					".csscomb.json": &bintree{publicVendorBootstrapLessCsscombJson, map[string]*bintree{}},
					".csslintrc": &bintree{publicVendorBootstrapLessCsslintrc, map[string]*bintree{}},
					"alerts.less": &bintree{publicVendorBootstrapLessAlertsLess, map[string]*bintree{}},
					"badges.less": &bintree{publicVendorBootstrapLessBadgesLess, map[string]*bintree{}},
					"bootstrap.less": &bintree{publicVendorBootstrapLessBootstrapLess, map[string]*bintree{}},
					"breadcrumbs.less": &bintree{publicVendorBootstrapLessBreadcrumbsLess, map[string]*bintree{}},
					"button-groups.less": &bintree{publicVendorBootstrapLessButtonGroupsLess, map[string]*bintree{}},
					"buttons.less": &bintree{publicVendorBootstrapLessButtonsLess, map[string]*bintree{}},
					"carousel.less": &bintree{publicVendorBootstrapLessCarouselLess, map[string]*bintree{}},
					"close.less": &bintree{publicVendorBootstrapLessCloseLess, map[string]*bintree{}},
					"code.less": &bintree{publicVendorBootstrapLessCodeLess, map[string]*bintree{}},
					"component-animations.less": &bintree{publicVendorBootstrapLessComponentAnimationsLess, map[string]*bintree{}},
					"dropdowns.less": &bintree{publicVendorBootstrapLessDropdownsLess, map[string]*bintree{}},
					"forms.less": &bintree{publicVendorBootstrapLessFormsLess, map[string]*bintree{}},
					"glyphicons.less": &bintree{publicVendorBootstrapLessGlyphiconsLess, map[string]*bintree{}},
					"grid.less": &bintree{publicVendorBootstrapLessGridLess, map[string]*bintree{}},
					"input-groups.less": &bintree{publicVendorBootstrapLessInputGroupsLess, map[string]*bintree{}},
					"jumbotron.less": &bintree{publicVendorBootstrapLessJumbotronLess, map[string]*bintree{}},
					"labels.less": &bintree{publicVendorBootstrapLessLabelsLess, map[string]*bintree{}},
					"list-group.less": &bintree{publicVendorBootstrapLessListGroupLess, map[string]*bintree{}},
					"media.less": &bintree{publicVendorBootstrapLessMediaLess, map[string]*bintree{}},
					"mixins": &bintree{nil, map[string]*bintree{
						"alerts.less": &bintree{publicVendorBootstrapLessMixinsAlertsLess, map[string]*bintree{}},
						"background-variant.less": &bintree{publicVendorBootstrapLessMixinsBackgroundVariantLess, map[string]*bintree{}},
						"border-radius.less": &bintree{publicVendorBootstrapLessMixinsBorderRadiusLess, map[string]*bintree{}},
						"buttons.less": &bintree{publicVendorBootstrapLessMixinsButtonsLess, map[string]*bintree{}},
						"center-block.less": &bintree{publicVendorBootstrapLessMixinsCenterBlockLess, map[string]*bintree{}},
						"clearfix.less": &bintree{publicVendorBootstrapLessMixinsClearfixLess, map[string]*bintree{}},
						"forms.less": &bintree{publicVendorBootstrapLessMixinsFormsLess, map[string]*bintree{}},
						"gradients.less": &bintree{publicVendorBootstrapLessMixinsGradientsLess, map[string]*bintree{}},
						"grid-framework.less": &bintree{publicVendorBootstrapLessMixinsGridFrameworkLess, map[string]*bintree{}},
						"grid.less": &bintree{publicVendorBootstrapLessMixinsGridLess, map[string]*bintree{}},
						"hide-text.less": &bintree{publicVendorBootstrapLessMixinsHideTextLess, map[string]*bintree{}},
						"image.less": &bintree{publicVendorBootstrapLessMixinsImageLess, map[string]*bintree{}},
						"labels.less": &bintree{publicVendorBootstrapLessMixinsLabelsLess, map[string]*bintree{}},
						"list-group.less": &bintree{publicVendorBootstrapLessMixinsListGroupLess, map[string]*bintree{}},
						"nav-divider.less": &bintree{publicVendorBootstrapLessMixinsNavDividerLess, map[string]*bintree{}},
						"nav-vertical-align.less": &bintree{publicVendorBootstrapLessMixinsNavVerticalAlignLess, map[string]*bintree{}},
						"opacity.less": &bintree{publicVendorBootstrapLessMixinsOpacityLess, map[string]*bintree{}},
						"pagination.less": &bintree{publicVendorBootstrapLessMixinsPaginationLess, map[string]*bintree{}},
						"panels.less": &bintree{publicVendorBootstrapLessMixinsPanelsLess, map[string]*bintree{}},
						"progress-bar.less": &bintree{publicVendorBootstrapLessMixinsProgressBarLess, map[string]*bintree{}},
						"reset-filter.less": &bintree{publicVendorBootstrapLessMixinsResetFilterLess, map[string]*bintree{}},
						"reset-text.less": &bintree{publicVendorBootstrapLessMixinsResetTextLess, map[string]*bintree{}},
						"resize.less": &bintree{publicVendorBootstrapLessMixinsResizeLess, map[string]*bintree{}},
						"responsive-visibility.less": &bintree{publicVendorBootstrapLessMixinsResponsiveVisibilityLess, map[string]*bintree{}},
						"size.less": &bintree{publicVendorBootstrapLessMixinsSizeLess, map[string]*bintree{}},
						"tab-focus.less": &bintree{publicVendorBootstrapLessMixinsTabFocusLess, map[string]*bintree{}},
						"table-row.less": &bintree{publicVendorBootstrapLessMixinsTableRowLess, map[string]*bintree{}},
						"text-emphasis.less": &bintree{publicVendorBootstrapLessMixinsTextEmphasisLess, map[string]*bintree{}},
						"text-overflow.less": &bintree{publicVendorBootstrapLessMixinsTextOverflowLess, map[string]*bintree{}},
						"vendor-prefixes.less": &bintree{publicVendorBootstrapLessMixinsVendorPrefixesLess, map[string]*bintree{}},
					}},
					"mixins.less": &bintree{publicVendorBootstrapLessMixinsLess, map[string]*bintree{}},
					"modals.less": &bintree{publicVendorBootstrapLessModalsLess, map[string]*bintree{}},
					"navbar.less": &bintree{publicVendorBootstrapLessNavbarLess, map[string]*bintree{}},
					"navs.less": &bintree{publicVendorBootstrapLessNavsLess, map[string]*bintree{}},
					"normalize.less": &bintree{publicVendorBootstrapLessNormalizeLess, map[string]*bintree{}},
					"pager.less": &bintree{publicVendorBootstrapLessPagerLess, map[string]*bintree{}},
					"pagination.less": &bintree{publicVendorBootstrapLessPaginationLess, map[string]*bintree{}},
					"panels.less": &bintree{publicVendorBootstrapLessPanelsLess, map[string]*bintree{}},
					"popovers.less": &bintree{publicVendorBootstrapLessPopoversLess, map[string]*bintree{}},
					"print.less": &bintree{publicVendorBootstrapLessPrintLess, map[string]*bintree{}},
					"progress-bars.less": &bintree{publicVendorBootstrapLessProgressBarsLess, map[string]*bintree{}},
					"responsive-embed.less": &bintree{publicVendorBootstrapLessResponsiveEmbedLess, map[string]*bintree{}},
					"responsive-utilities.less": &bintree{publicVendorBootstrapLessResponsiveUtilitiesLess, map[string]*bintree{}},
					"scaffolding.less": &bintree{publicVendorBootstrapLessScaffoldingLess, map[string]*bintree{}},
					"tables.less": &bintree{publicVendorBootstrapLessTablesLess, map[string]*bintree{}},
					"theme.less": &bintree{publicVendorBootstrapLessThemeLess, map[string]*bintree{}},
					"thumbnails.less": &bintree{publicVendorBootstrapLessThumbnailsLess, map[string]*bintree{}},
					"tooltip.less": &bintree{publicVendorBootstrapLessTooltipLess, map[string]*bintree{}},
					"type.less": &bintree{publicVendorBootstrapLessTypeLess, map[string]*bintree{}},
					"utilities.less": &bintree{publicVendorBootstrapLessUtilitiesLess, map[string]*bintree{}},
					"variables.less": &bintree{publicVendorBootstrapLessVariablesLess, map[string]*bintree{}},
					"wells.less": &bintree{publicVendorBootstrapLessWellsLess, map[string]*bintree{}},
				}},
				"package.json": &bintree{publicVendorBootstrapPackageJson, map[string]*bintree{}},
			}},
			"fontawesome": &bintree{nil, map[string]*bintree{
				"fonts": &bintree{nil, map[string]*bintree{
					"FontAwesome.otf": &bintree{publicVendorFontawesomeFontsFontawesomeOtf, map[string]*bintree{}},
					"fontawesome-webfont.eot": &bintree{publicVendorFontawesomeFontsFontawesomeWebfontEot, map[string]*bintree{}},
					"fontawesome-webfont.svg": &bintree{publicVendorFontawesomeFontsFontawesomeWebfontSvg, map[string]*bintree{}},
					"fontawesome-webfont.ttf": &bintree{publicVendorFontawesomeFontsFontawesomeWebfontTtf, map[string]*bintree{}},
					"fontawesome-webfont.woff": &bintree{publicVendorFontawesomeFontsFontawesomeWebfontWoff, map[string]*bintree{}},
					"fontawesome-webfont.woff2": &bintree{publicVendorFontawesomeFontsFontawesomeWebfontWoff2, map[string]*bintree{}},
				}},
				"less": &bintree{nil, map[string]*bintree{
					"animated.less": &bintree{publicVendorFontawesomeLessAnimatedLess, map[string]*bintree{}},
					"bordered-pulled.less": &bintree{publicVendorFontawesomeLessBorderedPulledLess, map[string]*bintree{}},
					"core.less": &bintree{publicVendorFontawesomeLessCoreLess, map[string]*bintree{}},
					"fixed-width.less": &bintree{publicVendorFontawesomeLessFixedWidthLess, map[string]*bintree{}},
					"font-awesome.less": &bintree{publicVendorFontawesomeLessFontAwesomeLess, map[string]*bintree{}},
					"icons.less": &bintree{publicVendorFontawesomeLessIconsLess, map[string]*bintree{}},
					"larger.less": &bintree{publicVendorFontawesomeLessLargerLess, map[string]*bintree{}},
					"list.less": &bintree{publicVendorFontawesomeLessListLess, map[string]*bintree{}},
					"mixins.less": &bintree{publicVendorFontawesomeLessMixinsLess, map[string]*bintree{}},
					"path.less": &bintree{publicVendorFontawesomeLessPathLess, map[string]*bintree{}},
					"rotated-flipped.less": &bintree{publicVendorFontawesomeLessRotatedFlippedLess, map[string]*bintree{}},
					"stacked.less": &bintree{publicVendorFontawesomeLessStackedLess, map[string]*bintree{}},
					"variables.less": &bintree{publicVendorFontawesomeLessVariablesLess, map[string]*bintree{}},
				}},
			}},
			"moment": &bintree{nil, map[string]*bintree{
				"moment-tz.js": &bintree{publicVendorMomentMomentTzJs, map[string]*bintree{}},
				"moment-tz.min.js": &bintree{publicVendorMomentMomentTzMinJs, map[string]*bintree{}},
				"moment.js": &bintree{publicVendorMomentMomentJs, map[string]*bintree{}},
				"moment.min.js": &bintree{publicVendorMomentMomentMinJs, map[string]*bintree{}},
			}},
			"require.min.js": &bintree{publicVendorRequireMinJs, map[string]*bintree{}},
			"sweetalert": &bintree{nil, map[string]*bintree{
				"sweetalert.css": &bintree{publicVendorSweetalertSweetalertCss, map[string]*bintree{}},
				"sweetalert.min.js": &bintree{publicVendorSweetalertSweetalertMinJs, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

